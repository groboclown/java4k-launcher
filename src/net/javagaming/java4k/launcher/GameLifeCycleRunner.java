/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to &lt;http://unlicense.org/
 */
package net.javagaming.java4k.launcher;

import net.javagaming.java4k.launcher.progress.ProgressController;

import java.awt.Container;
import java.io.IOException;
import java.util.List;

/**
 * Manages the life cycle of the game.  The runner will run the game inside a
 * container passed in by the {@link #start(java.awt.Container, boolean)}
 * method, either inside the given container (if not null) or inside a new
 * JFrame (if null).  Note that this will not always be the case, as some
 * games will launch their own JFrame instances.
 *
 * @author Groboclown
 */
public interface GameLifeCycleRunner {
    /**
     * Is the game active?
     *
     * @return true if {@link #start(java.awt.Container, boolean)} has been
     *      called, {@link #destroy(long, boolean, int)} has not, and the
     *      game is still running.
     */
    public boolean isActive();

    /**
     *
     * @return all uncaught exceptions generated by this game.
     */
    public List<Throwable> getExceptions();

    /**
     * Initializes and starts the game.  This includes downloading the files,
     * setting up a security manager, and instantiating the objects.
     * Will only be called once.
     *
     * @param parentContainer the parent container to
     * @param wait true if the task should wait indefinitely, or false if
     *             the command should timeout with an
     *             {@link java.lang.InterruptedException}.
     * @throws InterruptedException if the task times out.
     * @throws java.io.IOException if there was a problem loading the
     *      files.
     */
    public void start(Container parentContainer,
               boolean wait) throws InterruptedException, IOException;

    /**
     * Notifies the game that the window is now visible and active.  Usually,
     * this occurs if the parent container is restored after being minimized.
     *
     * @param wait true if the task should wait indefinitely, or false if
     *             the command should timeout with an
     *             {@link java.lang.InterruptedException}.
     * @throws InterruptedException if the task times out.
     */
    public void startEvent(boolean wait)
            throws InterruptedException;


    /**
     * Called if the parent container is minimized.
     *
     * @param wait true if the task should wait indefinitely, or false if
     *             the command should timeout with an
     *             {@link java.lang.InterruptedException}.
     * @throws InterruptedException if the task times out.
     */
    public void stopEvent(boolean wait)
            throws InterruptedException;


    /**
     * Forcibly stop the running game.  This will wait until all attempts
     * to stop the running game have completed.
     *
     * @return true if the game was successfully stopped, otherwise false.
     */
    public boolean destroy(ProgressController progress);
}
